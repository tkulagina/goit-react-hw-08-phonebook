{"version":3,"file":"static/js/249.fedfa56b.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const selectContacts = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoggedIn = state => state.auth.isLoggedIn;\nexport const selectUser = state => state.auth.user;\nexport const selectIsRefreshing = state => state.auth.isRefreshing;\nexport const selectIsFetching = state => state.auth.isFetching;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\",\"addContactBtn\":\"ContactForm_addContactBtn__3KI6e\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [contactName, setcontactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.some(({ name }) => name === contactName)) {\n      window.alert(`${contactName} is already in your contacts`);\n      return;\n    }\n\n    dispatch(\n      addContact({\n        name: contactName,\n        number,\n        id: nanoid(),\n      })\n    );\n\n    setcontactName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { value, name } = e.target;\n\n    switch (name) {\n      case 'name':\n        setcontactName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label className={css.formLabel}>\n        Name\n        <input\n          className={css.formInput}\n          type=\"text\"\n          name=\"name\"\n          value={contactName}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label className={css.formLabel}>\n        Number\n        <input\n          className={css.formInput}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button className={css.addContactBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactListBtn\":\"ContactList_contactListBtn__iwQAv\",\"contactText\":\"ContactList_contactText__mBjoQ\"};","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport { selectContacts, selectStatusFilter } from 'redux/selectors';\n\nimport css from './ContactList.module.css';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filtered = useSelector(selectStatusFilter);\n\n  const normalizedFilter = filtered.toLowerCase();\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <li key={id} className={css.contactItem}>\n          <p className={css.contactText}>\n            {name}: {number}\n          </p>\n          <button\n            className={css.contactListBtn}\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.string),\n  onDeleteContact: PropTypes.func,\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactLabel\":\"Filter_contactLabel__TqLYf\",\"contactInput\":\"Filter_contactInput__YRet6\"};","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport css from './Filter.module.css';\n\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectStatusFilter } from 'redux/selectors';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <label className={css.contactLabel}>\n      Find contacts by name\n      <input\n        className={css.contactInput}\n        type=\"text\"\n        name={filter}\n        value={filter}\n        onChange={onChange}\n        placeholder=\"Please write name\"\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  OnChange: PropTypes.func,\n};","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'start',\n      }}\n    >\n      <ContactForm />\n      <Filter />\n      <title>Contacts</title>\n      {isLoading && !error && (\n        <b\n          style={{\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            marginTop: '10px',\n          }}\n        >\n          Loading...\n        </b>\n      )}\n      <ContactList />\n    </div>\n  );\n}"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectStatusFilter","filter","selectIsLoading","isLoading","selectError","error","ContactForm","useSelector","dispatch","useDispatch","useState","contactName","setcontactName","number","setNumber","handleChange","e","target","value","name","onSubmit","preventDefault","some","window","alert","addContact","className","css","type","onChange","pattern","title","required","ContactList","normalizedFilter","toLowerCase","filteredContacts","includes","useEffect","fetchContacts","map","onClick","deleteContact","Filter","setFilter","placeholder","Contacts","style","display","flexDirection","alignItems","marginLeft","marginRight","marginTop"],"sourceRoot":""}